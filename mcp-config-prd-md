# Product Requirements Document (PRD)

**Product Name:** MCP-Config

---

## Overview:
This tool aims to significantly simplify the config process for Model Context Protocol (MCP) servers. It will provide users with an intuitive way to manage server settings and enable seamless sharing of these configs across various client applications. The primary goal is to ensure a streamlined and user-friendly experience for setting up and maintaining MCP server instances.

**Important Note:** Commands from this package will not be visible to the end user because the referencing component will mask them, providing a seamless integration experience.

### Features:

#### 1. Config Command
This command will guide users through the config process.

* It will prompt users for necessary config values.
* The tool will be smart enough to detect sensitive information (e.g., API keys, tokens, passwords).
* Any config values containing the terms "password", "secret", "key", or similar will be stored securely automatically.
* Secrets will be automatically saved as environment variables for enhanced security.
* All other non-secret config values will be saved to a standard config file.
* When a user initiates a `config` command or an `update config` command, the tool will first check if any target clients have been previously specified.
* If no target clients are specified, the tool will prompt the user to select the clients they intend to use.
* If there is a global config already present, the `create config` or `update config` commands will not change it unless there is a `-g` flag provided with the command.
* Initially supported target clients include:
    * VS Code
    * Claude Code
    * Claude Desktop
    * Cursor

#### 2. Get Config Command
This command allows users to retrieve and inspect their server configs.

* If called without a specific key name, it will fetch and display all config values.
* For each config value, the tool will indicate where it is stored (e.g., in an environment variable, or a specific config file).
* If called with a specific key name, it will display only the value for that particular config value and its storage location.

#### 3. Update Config Command
This command provides functionality to modify existing config values.

* Users will be able to update specific config values.
* Similar to the `config` command, it will adhere to the "smart config placement" logic, ensuring secrets are handled as environment variables and other values are placed in standard config files.
* Any config values containing the terms "password", "secret", "key", or similar will be stored securely automatically.
* It will also perform the target client check as described in the Config Command feature, prompting the user for clients if none are set.
* If there is a global config already present, the command will not modify it unless the `-g` flag is specified.

#### 4. Client Config Sharing
This feature enables the tool to facilitate config for other applications.

* The tool will be smart enough to place the config files in the specific locations where the selected client tools expect them.
* This ensures that the consumer of the MCP server (e.g., a specific AI tool or IDE) can readily access the necessary config.
