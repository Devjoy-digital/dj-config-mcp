/**
 * Environment Storage
 * Handles sensitive data storage in .env files
 */

const fs = require('fs').promises;
const path = require('path');
const dotenv = require('dotenv');
const ClientRegistry = require('../distribution/client-registry');

class EnvStorage {
  constructor(clientRegistry = null) {
    this.clientRegistry = clientRegistry || new ClientRegistry();
    this.localPath = null;
    this.globalPath = null;
  }

  /**
   * Get local storage path
   * @returns {Promise<string>} Local storage path
   */
  async getLocalPath() {
    if (!this.localPath) {
      this.localPath = await this.clientRegistry.getStoragePath('env', false);
    }
    return this.localPath;
  }

  /**
   * Get global storage path
   * @returns {Promise<string>} Global storage path
   */
  async getGlobalPath() {
    if (!this.globalPath) {
      this.globalPath = await this.clientRegistry.getStoragePath('env', true);
    }
    return this.globalPath;
  }

  /**
   * Read .env file
   * @param {string} envPath - Path to .env file
   * @returns {Promise<string>} File content
   */
  async read(envPath) {
    try {
      return await fs.readFile(envPath, 'utf8');
    } catch (error) {
      if (error.code === 'ENOENT') {
        return '';
      }
      throw error;
    }
  }

  /**
   * Write .env file
   * @param {string} envPath - Path to .env file
   * @param {string} content - File content
   * @returns {Promise<void>}
   */
  async write(envPath, content) {
    const dir = path.dirname(envPath);
    
    // Ensure directory exists
    await fs.mkdir(dir, { recursive: true });
    
    // Write file
    await fs.writeFile(envPath, content);
    
    // Set secure permissions (Unix-like systems only)
    if (process.platform !== 'win32') {
      await fs.chmod(envPath, 0o600);
    }
  }

  /**
   * Parse .env content
   * @param {string} content - .env file content
   * @returns {Object} Parsed environment variables
   */
  parse(content) {
    return dotenv.parse(content);
  }

  /**
   * Stringify environment variables
   * @param {Object} envVars - Environment variables
   * @returns {string} .env file content
   */
  stringify(envVars) {
    const lines = [
      '# Generated by dj-config-mcp',
      '# DO NOT COMMIT THIS FILE TO VERSION CONTROL',
      ''
    ];
    
    for (const [key, value] of Object.entries(envVars)) {
      // Escape values with spaces or special characters
      const escapedValue = this.escapeValue(value);
      lines.push(`${key}=${escapedValue}`);
    }
    
    return lines.join('\n') + '\n';
  }

  /**
   * Escape value for .env file
   * @param {string} value - Value to escape
   * @returns {string} Escaped value
   */
  escapeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    
    // Check if value needs quotes
    if (value.includes(' ') || value.includes('#') || value.includes('"') || value.includes("'")) {
      // Use double quotes and escape any double quotes in the value
      return `"${value.replace(/"/g, '\\"')}"`;
    }
    
    return value;
  }

  /**
   * Convert dot notation to environment variable key
   * @param {string} key - Dot notation key
   * @returns {string} Environment variable key
   */
  toEnvKey(key) {
    // Convert "api.secret" to "API_SECRET"
    return key.toUpperCase().replace(/\./g, '_');
  }

  /**
   * Convert environment variable key to dot notation
   * @param {string} envKey - Environment variable key
   * @returns {string} Dot notation key
   */
  fromEnvKey(envKey) {
    // Convert "API_SECRET" to "api.secret"
    return envKey.toLowerCase().replace(/_/g, '.');
  }

  /**
   * Set an environment variable
   * @param {string} key - Configuration key
   * @param {string} value - Configuration value
   * @param {boolean} isGlobal - Use global configuration
   * @returns {Promise<void>}
   */
  async set(key, value, isGlobal = false) {
    const envPath = isGlobal ? await this.getGlobalPath() : await this.getLocalPath();
    
    // Convert dot notation to uppercase env var
    const envKey = this.toEnvKey(key);
    
    // Read existing .env
    const envContent = await this.read(envPath);
    const envVars = this.parse(envContent);
    
    // Update or add
    envVars[envKey] = value;
    
    // Write back
    const newContent = this.stringify(envVars);
    await this.write(envPath, newContent);
  }

  /**
   * Get an environment variable
   * @param {string} key - Configuration key
   * @param {boolean} isGlobal - Use global configuration
   * @returns {Promise<string>} Configuration value
   */
  async get(key, isGlobal = false) {
    const envPath = isGlobal ? await this.getGlobalPath() : await this.getLocalPath();
    const envKey = this.toEnvKey(key);
    
    // Check process.env first (already loaded)
    if (process.env[envKey] !== undefined) {
      return process.env[envKey];
    }
    
    // Read from file
    const envContent = await this.read(envPath);
    const envVars = this.parse(envContent);
    
    return envVars[envKey];
  }

  /**
   * Delete an environment variable
   * @param {string} key - Configuration key
   * @param {boolean} isGlobal - Use global configuration
   * @returns {Promise<void>}
   */
  async delete(key, isGlobal = false) {
    const envPath = isGlobal ? await this.getGlobalPath() : await this.getLocalPath();
    const envKey = this.toEnvKey(key);
    
    // Read existing .env
    const envContent = await this.read(envPath);
    const envVars = this.parse(envContent);
    
    // Delete key
    delete envVars[envKey];
    
    // Write back
    const newContent = this.stringify(envVars);
    await this.write(envPath, newContent);
  }

  /**
   * Get all environment variable keys
   * @param {boolean} isGlobal - Use global configuration
   * @returns {Promise<Array<string>>} Array of keys
   */
  async getAllKeys(isGlobal = false) {
    const envPath = isGlobal ? await this.getGlobalPath() : await this.getLocalPath();
    const envContent = await this.read(envPath);
    const envVars = this.parse(envContent);
    
    // Convert back to dot notation
    return Object.keys(envVars).map(envKey => this.fromEnvKey(envKey));
  }

  /**
   * Get all environment variables
   * @param {boolean} isGlobal - Use global configuration
   * @returns {Promise<Object>} Environment variables
   */
  async getAll(isGlobal = false) {
    const envPath = isGlobal ? await this.getGlobalPath() : await this.getLocalPath();
    const envContent = await this.read(envPath);
    return this.parse(envContent);
  }

  /**
   * Load environment variables into process.env
   * @returns {Promise<void>}
   */
  async load() {
    // Load global .env first, then local
    const globalPath = await this.getGlobalPath();
    const localPath = await this.getLocalPath();
    
    const globalEnv = await this.read(globalPath);
    const localEnv = await this.read(localPath);
    
    if (globalEnv) {
      const vars = this.parse(globalEnv);
      Object.assign(process.env, vars);
    }
    
    if (localEnv) {
      const vars = this.parse(localEnv);
      Object.assign(process.env, vars);
    }
  }
}

module.exports = EnvStorage;